#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <string.h>

pthread_t* ts;
pthread_t* as, *bs,*oth;
pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;
int acnt, bcnt, ocnt;
void* doA(void *a){
	char* word = (char*) *(char*)a;
	int nr = 0;	
	for(int i = 0; i < strlen(word); ++i)
		if(strchr("1234567890", word[i]) == 0){
			if(nr == 0)
				nr = word[i];
			else {
			nr = nr * 10;
			nr += word[i];
			}
		
	}
	printf("We got %d", g);
	g += nr;	
	printf("And changed to %d\n", g);		
}
void* doB(void *a){
	char* word = (char*) *(char*)a;
	int nr = 0;	
	for(int i = 0; i < strlen(word); ++i)
		if(strchr("1234567890", word[i]) == 0){
			nr++;
	}
	printf("We got %d", g);
	g -= nr;	
	printf("And decremented to %d because it has %d digits\n", g, nr);
}
void* doO(void *a){
	char* word = (char*) *(char*)a;
	int nr = 0;	
	for(int i = 0; i < 10; ++i){
		nr = rand % 11+10;
		printf("We got %d", g);
		g += nr;	
		printf("And changed to %d and will sleep 2 seconds\n", g);
		sleep(2);
	}
}


void* checkDigits(void *a){
	char* word = (char*) *(char*)a;
	printf("Received: %s", word);
	for(int i = 0; i < strlen(word); ++i)
		if(strchr("12345667890", word[i]) == 0){
	
		if(pthread_create( as + acnt, NULL, doA, word) < 0){
			perror("Error creating thread");
			exit(2);	
			}
		if(pthread_create( bs + bcnt, NULL, doB, word) < 0){
			perror("Error creating thread");
			exit(3);	
			}
		}
		else{
		if(pthread_create(oth + ocnt, NULL, doO, word)<0){
			perror("Error creating thread");
			exit(4);
			}
		}
	
}
int main(){
	char* word =(char*) malloc(sizeof(char)*256);
	ts = (pthread_t*) malloc(sizeof(pthread_t)*256);
	as = (pthread_t*) malloc(sizeof(pthread_t)*256);
	bs = (pthread_t*) malloc(sizeof(pthread_t)*256);
	oth = (pthread_t*) malloc(sizeof(pthread_t)*256);
	int ok = 1, cnt = 0;
	while( ok ){
		fgets(word, sizeof(word), stdin);
	
		if( strcmp(word, "stop") == 0) 

		//if( strlen(word) == 5 && word[0] == 's' && word[1] == 't' && word[2] == 'o' && word[3] == 'p' )
			ok = 0;
		else{
			if( pthread_create( ts + cnt, NULL, checkDigits, word ) < 0 ){
				perror("Error creating thread");
				exit(1);
			}
			cnt++;

		}
	}
	for( int i = 0; i < cnt; ++i )
		pthread_join( ts[cnt], NULL );

	
	return 0;
}

