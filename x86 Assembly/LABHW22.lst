     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ;a*b-(100-c)/(b*b)+e+x
     7                                  ;a-word; b,c-byte; e-doubleword; x-qword
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 0A00                    a dw 10
    18 00000002 02                      b db 2
    19 00000003 14                      c db 20
    20 00000004 05000000                e dd 5
    21 00000008 0F00000000000000        x dq 15
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 B800000000                  mov EAX,0
    27 00000005 A0[02000000]                mov AL,[b] ; AL=b
    28 0000000A B400                        mov AH,0
    29 0000000C 66BA0000                    mov DX,0
    30 00000010 66F725[00000000]            mul word[a] ; DX:AX=AX*a=b*a=a*b  
    31 00000017 6652                        push DX
    32 00000019 6650                        push AX
    33 0000001B 58                          pop EAX ; EAX=a*b
    34 0000001C 89C3                        mov EBX,EAX ; EBX=a*b   !!!
    35 0000001E 66B96400                    mov CX,100 ; CX=100
    36 00000022 662B0D[03000000]            sub CX,[c] ; CX=100-c
    37 00000029 A0[02000000]                mov AL,[b] ; AL=b
    38 0000002E F625[02000000]              mul byte[b] ; AX=AL*b=b*b   
    39                                      
    40 00000034 6689C2                      mov DX,AX ; DX=b*b
    41                                      
    42 00000037 88C8                        mov AL,CL ; AX=100-c
    43 00000039 B400                        mov AH,0
    44 0000003B 6689D1                      mov CX,DX ; CX=b*b
    45 0000003E 66BA0000                    mov DX,0
    46                                      
    47 00000042 66F7F1                      div CX ; AX=DX:AX/BX=(100-c)/(b*b) DX=DX:AX%BX !!!
    48 00000045 6629C3                      sub BX,AX ; BX=BX-AX=a*b-(100-c)/(b*b)
    49 00000048 031D[04000000]              add EBX,[e] ; EBX=EBX+e=a*b-(100-c)/(b*b)+e
    50 0000004E 89D8                        mov EAX,EBX ; mutam in eax pt a putea face urmatoarea adunare
    51 00000050 BA00000000                  mov EDX,0 ; eliberam spatiul pt EDX:EAX -> qword
    52 00000055 0305[08000000]              add EAX,dword[x]
    53 0000005B 0315[0C000000]              add EDX,dword[x+4]
    54                                          ; exit(0)
    55 00000061 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000063 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
