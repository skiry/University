     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  ;[d-2*(a-b)+b*c]/2 a,b,c-byte d-word
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 02                          a db 2
    15 00000001 01                          b db 1
    16 00000002 02                          c db 2
    17 00000003 0400                        d dw 4
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 B800000000                      mov EAX,0
    23 00000005 BA00000000                      mov EDX,0
    24 0000000A 66B80000                        mov AX,0 ; AX=0
    25 0000000E A0[00000000]                    mov AL,[a] ; AL=a
    26 00000013 2A05[01000000]                  sub AL,[b] ; AL=a-b
    27 00000019 B402                            mov AH,2
    28 0000001B F6E4                            mul AH ; AX=AL*AH=(a-b)*2
    29 0000001D 668B15[03000000]                mov DX,[d] ; DX=d
    30 00000024 6629C2                          sub DX,AX ; DX=DX-AX=d-2*(a-b)
    31 00000027 66B80000                        mov AX,0 ; AX=0
    32 0000002B A0[01000000]                    mov AL,[b] ; AL=b
    33 00000030 F625[02000000]                  mul byte[c] ; AX=AL*c=b*c
    34 00000036 6601C2                          add DX,AX ; DX=DX+AX=d-2*(a-b)+(b*c)
    35 00000039 6689D0                          mov AX,DX ; AX=DX=d-2*(a-b)+(b*c)
    36 0000003C B202                            mov DL,2
    37 0000003E F6F2                            div DL ; AL=AX / 2 and AH=AX % 2
    38                                          ; exit(0)
    39 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
