     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ;Se dau doua numere naturale a si b (a, b: word, definite in segmentul de date). 
     7                                  ;Sa se calculeze a/b si sa se afiseze catul si restul impartirii in urmatorul format:
     8                                  ;"Cat = <cat>, rest = <rest>"
     9                                  ;Exemplu: pentru a=23 si b=10 se va afisa: "Cat = 2, rest = 3"
    10                                  ;Valorile vor fi afisate in format decimal (baza 10) cu semn.
    11                                  
    12                                  ; declare external functions needed by our program
    13                                  extern exit,printf             ; tell nasm that exit exists even if we won't be defining it
    14                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    15                                  import printf msvcrt.dll               ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 1700                    a dw 23
    21 00000002 F6FF                    b dw -10
    22 00000004 636174203D20256400      cat db "cat = %d",0
    23 0000000D 72657374203D202564-     restul db "rest = %d",0
    23 00000016 00                 
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 B800000000                  mov EAX,0
    29 00000005 BA00000000                  mov EDX,0
    30 0000000A 66A1[00000000]              mov AX,[a] ; AX=a -> AX=23
    31 00000010 6699                        cwd ; DX=0 se pregateste pt impartire cu semn
    32 00000012 66F73D[02000000]            idiv word [b] ; AX=DX:AX/[b] DX=DX:AX%[b]
    33 00000019 60                          PUSHAD ; pt a pastra valorile in EDX ulterior 
    34 0000001A 98                          cwde
    35 0000001B 50                          push EAX
    36 0000001C 68[04000000]                push cat
    37 00000021 FF15[00000000]              call [printf]
    38 00000027 83C408                      add ESP, 4*2
    39 0000002A 61                          POPAD ; pt a afisa EDX corect mai jos
    40 0000002B 60                          PUSHAD
    41 0000002C 6689D0                      mov AX, DX
    42 0000002F 98                          cwde
    43 00000030 50                          push EAX
    44 00000031 68[0D000000]                push restul
    45 00000036 FF15[00000000]              call [printf]
    46 0000003C 83C408                      add ESP,4*2
    47 0000003F 61                          POPAD
    48                                          ; exit(0)
    49 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
