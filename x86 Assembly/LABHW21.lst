     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  ; (b+b)-c-(a+d)  a - byte, b - word, c - double word, d - qword
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0A                      a db 10
    15 00000001 1400                    b dw 20
    16 00000003 05000000                c dd 5
    17 00000007 0500000000000000        d dq 5
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 B800000000                  mov EAX,0
    23 00000005 66A1[01000000]              mov AX,[b] ; AX=b
    24 0000000B 1305[01000000]              adc EAX,[b] ; EAX=b+b 
    25                                      ;cwd
    26                                      
    27 00000011 1B05[03000000]              sbb EAX,[c] ; EAX=(b+b)-c
    28 00000017 1B05[00000000]              sbb EAX,[a] ; EAX=(b+b)-c-a
    29 0000001D 99                          cdq ; am eliberat spatiul din EDX cu semn
    30 0000001E 2B05[07000000]              sub EAX,[d]
    31 00000024 1B15[0B000000]              sbb EDX,[d+4]
    32                                          ; exit(0)
    33 0000002A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    34 0000002C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
